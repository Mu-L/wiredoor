name: Wiredoor CI Pipeline

on:
  push:
    branches:
      - main
      - development
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main
      - development

permissions:
  contents: read
  packages: write

jobs:
  build-dev:
    name: Build dev image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        run: echo "${{ secrets.WIREDOOR_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Dev Image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/wiredoor:build-${{ github.sha }} --target development -f docker/Dockerfile .

      - name: Push image
        run: docker push ghcr.io/${{ github.repository_owner }}/wiredoor:build-${{ github.sha }}

  lint:
    name: Lint Dev Image
    runs-on: ubuntu-latest
    needs: build-dev

    steps:
      - name: Log in to GHCR
        run: echo "${{ secrets.WIREDOOR_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run Lint
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/wiredoor:build-${{ github.sha }} npm run lint

  test:
    name: Run Tests in Dev Image
    runs-on: ubuntu-latest
    needs: build-dev

    steps:
      - name: Log in to GHCR
        run: echo "${{ secrets.WIREDOOR_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run Tests
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/wiredoor:build-${{ github.sha }} npm run test

  build-prod:
    name: Build Prod Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        run: echo "${{ secrets.WIREDOOR_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine tags
        id: tags
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "TAGS=latest" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/development" ]]; then
            echo "TAGS=dev,dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "TAGS=${TAG_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Image with All Tags
        run: |
          IFS=',' read -ra TAGS <<< "${{ steps.tags.outputs.TAGS }}"
          TAG_ARGS=""

          for tag in "${TAGS[@]}"; do
            TAG_ARGS="$TAG_ARGS -t ghcr.io/${{ github.repository_owner }}/wiredoor:$tag"
          done

          echo $TAG_ARGS

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --target=production \
            -f docker/Dockerfile \
            $TAG_ARGS \
            --push
            .

  scan-image:
    name: Scan Prod Image with Trivy
    runs-on: ubuntu-latest
    needs: build-prod

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Log in to GHCR
        run: echo "${{ secrets.WIREDOOR_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine tag
        id: tag
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "TAG=latest" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/development" ]]; then
            echo "TAG=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/wiredoor:${{ steps.tag.outputs.TAG }}
          format: table
          exit-code: 0
          ignore-unfixed: true
