name: Wiredoor CI Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

permissions:
  contents: read
  packages: write

jobs:
  build-dev:
    name: Build dev image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Dev Image
        run: docker build -t wiredoor:dev --target development -f Dockerfile .

      - name: Save image to tarball
        run: docker save wiredoor:dev > wiredoor-dev.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wiredoor-dev
          path: wiredoor-dev.tar

  lint:
    name: Lint Dev Image
    runs-on: ubuntu-latest
    needs: build-dev

    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: wiredoor-dev

      - name: Load image
        run: docker load < wiredoor-dev.tar

      - name: Run Lint
        run: |
          docker run --rm -w /app/api wiredoor:dev npm run lint

  test:
    name: Run Tests in Dev Image
    runs-on: ubuntu-latest
    needs: build-dev

    steps:
      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: wiredoor-dev

      - name: Load image
        run: docker load < wiredoor-dev.tar

      - name: Run Tests
        run: |
          docker run --rm -w /app/api wiredoor:dev npm run test

  build-prod:
    name: Build Prod Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Prod Image
        run: |
          docker build -t wiredoor:prod -f Dockerfile --target=production .

  scan-image:
    name: Scan Prod Image with Trivy
    runs-on: ubuntu-latest
    needs: build-prod

    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: wiredoor:prod
          format: table
          exit-code: 1
          ignore-unfixed: true

  publish-image:
    name: Publish to GHCR
    runs-on: ubuntu-latest
    needs: scan-image

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.WIREDOOR_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag & Push Image
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          IMAGE=ghcr.io/${{ github.repository_owner }}/wiredoor

          if [ "${GITHUB_REF##*/}" = "main" ]; then
            docker tag wiredoor:prod $IMAGE:latest
            docker tag wiredoor:prod $IMAGE:$SHORT_SHA
            docker push $IMAGE:latest
            docker push $IMAGE:$SHORT_SHA
          elif [ "${GITHUB_REF##*/}" = "development" ]; then
            docker tag wiredoor:prod $IMAGE:dev
            docker tag wiredoor:prod $IMAGE:dev-$SHORT_SHA
            docker push $IMAGE:dev
            docker push $IMAGE:dev-$SHORT_SHA
          fi
