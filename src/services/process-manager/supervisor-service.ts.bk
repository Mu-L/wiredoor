import config from '../../config';
import child from "child_process";
import supervisord from "supervisord";
import { Service } from 'typedi';

interface SupervisorConnection {
  hostname: string;
  port: number;
  user: string;
  password: string;
}

enum states {
  DISABLED="DISABLED",
  STARTING="STARTING",
  STOPPING="STOPPING",
  STOPPED="STOPPED",
  RUNNING="RUNNING",
  BACKOFF="BACKOFF",
  EXITED="EXITED",
  FATAL="FATAL",
  UNKNOWN="UNKNOWN"
};

enum stateCodes {
  UNKNOWN_METHOD=1,
  INCORRECT_PARAMETERS=2,
  BAD_ARGUMENTS=3,
  SIGNATURE_UNSUPPORTED=4,
  SHUTDOWN_STATE=6,
  BAD_NAME=10,
  BAD_SIGNAL=11,
  NO_FILE=20,
  NOT_EXECUTABLE=21,
  FAILED=30,
  ABNORMAL_TERMINATION=40,
  SPAWN_ERROR=50,
  ALREADY_STARTED=60,
  NOT_RUNNING=70,
  SUCCESS=80,
  ALREADY_ADDED=90,
  STILL_RUNNING=91,
  CANT_REREAD=92
};

interface SupervisorProcessInfo {
  description: string;
  pid: number;
  stderr_logfile: string;
  stop: number;
  logfile: string;
  exitstatus: number;
  spawnerr: string;
  now: number;
  group: string;
  name: string;
  statename: states;
  start: number;
  state: stateCodes;
  stdout_logfile: string;
}

@Service()
export class SupervisorService {
  private connection: SupervisorConnection;
  private _client;

  constructor () {
    this.connection = config.supervisor
  }

  getClient() {
    if(!this._client) {
      this._client = supervisord.connect(this.connection)
    }

    return this._client;
  }

  async getProcessInfo(name: string): Promise<SupervisorProcessInfo> {
    const client = this.getClient();
    return new Promise((resolve, reject) => {
      // @ts-ignore
      client.getProcessInfo(name, function(err, result) {
        if (err) {
          reject(err);
        }
        resolve(result);
      });
    });
  }

  async startProcess(name: string): Promise<string> {
    const client = this.getClient();
    return new Promise((resolve, reject) => {
      // @ts-ignore
      client.startProcess(name, function(err, result) {
        if (err && err.faultCode !== stateCodes.ALREADY_STARTED) {
          reject(err);
        }
        resolve(result);
      });
    });
  }

  async stopProcess(name: string): Promise<string> {
    const client = this.getClient();
    return new Promise((resolve, reject) => {
      // @ts-ignore
      client.stopProcess(name, function(err, result) {
        if (err && err.faultCode !== stateCodes.NOT_RUNNING) {
          reject(err);
        }
        resolve(result);
      });
    });
  }

  async restartProcess(name: string): Promise<boolean> {
    try {
      await this.stopProcess(name);
      await this.startProcess(name);
      return true;
    } catch (e) {
      throw e;
    }
  }
}
